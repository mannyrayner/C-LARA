import json
import os
import asyncio
from .clara_chatgpt4 import (
    get_api_chatgpt4_response,
    get_api_chatgpt4_image_response,
    get_api_chatgpt4_interpret_image_response,
    )
from .clara_utils import (
    read_txt_file,
    write_txt_file,
    read_json_file,
    write_json_to_file,
    make_directory,
    absolute_file_name
    )

# Test with Lily Goes the Whole Hog

def test_lily_style():
    project_dir = '$CLARA/coherent_images/LilyGoesTheWholeHog'
    api_calls = asyncio.run(process_style(project_dir))
    cost = sum([api_call.cost for api_call in api_calls])
    print(f'Cost = ${cost:2f}')
    
# Style

async def process_style(project_dir):
    expanded_description, api_call1 = await generate_expanded_style_description(project_dir)
    image_file, api_call2 = await generate_style_image(project_dir, expanded_description)
    image_description, api_call3 = await interpret_style_image(project_dir, image_file)
    evaluation, api_call4 = await evaluate_style_fit(project_dir, expanded_description, image_description)

    return [ api_call1, api_call2, api_call3, api_call4 ]

async def generate_expanded_style_description(project_dir):
    # Make directory if necessary
    make_project_dir(project_dir, 'style')
    
    # Read the base style description
    base_description = read_project_txt_file(project_dir, 'style/style_description.txt')

    # Get the text of the story
    text = get_text(project_dir)

    # Create the prompt to expand the style description
    prompt = f"""We are later going to create a set of images to illustrate the following text:

{text}

The intended style in which the images will be produced is briefly described as follows:

{base_description}

For now, please expand the brief description into a detailed specification that can be passed to DALL-E-3 to
generate a single image, appropriate to the story, which exemplifies the style. The description must be at
most 3000 characters long to conform to DALL-E-3's constraints."""

    # Get the expanded description from the AI
    api_call = await get_api_chatgpt4_response(prompt)

    # Save the expanded description
    expanded_description = api_call.response
    write_project_txt_file(expanded_description, project_dir, 'style/expanded_description.txt')
    return expanded_description, api_call

async def generate_style_image(project_dir, description):
    # Make directories if necessary
    make_project_dir(project_dir, 'style/images')
    make_project_dir(project_dir, 'style/descriptions')
    
    image_file = project_pathname(project_dir, 'style/images/style_image.jpg')
    api_call = await get_api_chatgpt4_image_response(description, image_file)

    return image_file, api_call

async def interpret_style_image(project_dir, image_file):
    # Make directories if necessary
    make_project_dir(project_dir, 'style/descriptions')

    prompt = """Please provide as detailed a description as possible of the following image, focussing
on the style. The content is not important.

The image has been generated by DALL-E-3 to test whether the instructions used to produce it exemplify the
intended style, and the information you provide will be used to ascertain how good the match is.
"""
    api_call = await get_api_chatgpt4_interpret_image_response(prompt, image_file)

    description = api_call.response
    write_project_txt_file(description, project_dir, 'style/descriptions/style_image_description.txt')

    return description, api_call

async def evaluate_style_fit(project_dir, expanded_description, image_description):
    # Make directories if necessary
    make_project_dir(project_dir, 'style/evaluations')
    
    prompt = f"""Please read the 'style description' and the 'image description' below.

The style description specifies an image exemplifying the style that will be used in a larger set of images.

The image description has been produced by gpt-4o, which was asked to describe the style of the image generated from the style description. 

Compare the style description with the image description and evaluate how well the image matches in terms of style.

Style Description:
{expanded_description}

Image Description:
{image_description}

Evaluate using one of the following words: excellent/good/acceptable/poor.

The response will be read by a Python script, so give only the single-word evaluation."""
    api_call = await get_api_chatgpt4_response(prompt)

    evaluation = api_call.response

    write_project_txt_file(evaluation, project_dir, 'style/evaluations/style_evaluation.txt')
    
    return evaluation, api_call


def get_pages(project_dir):
    story_data = read_project_json_file(project_dir, 'story.json')

    pages = [ item['page_number'] for item in story_data ]
               
    return pages

def get_text(project_dir):
    story_data = read_project_json_file(project_dir, 'story.json')

    text_content = [ item['text'] for item in story_data ]
               
    return '\n'.join(text_content)


# Utilities

def project_pathname(project_dir, pathname):
    return absolute_file_name(os.path.join(project_dir, pathname))

def make_project_dir(project_dir, directory):
    make_directory(project_pathname(project_dir, directory), parents=True, exist_ok=True)

def read_project_txt_file(project_dir, pathname):
    return read_txt_file(project_pathname(project_dir, pathname))

def read_project_json_file(project_dir, pathname):
    return read_json_file(project_pathname(project_dir, pathname))


def write_project_txt_file(text, project_dir, pathname):
    write_txt_file(text, project_pathname(project_dir, pathname))

def write_project_json_file(text, project_dir, pathname):
    write_json_to_file(text, project_pathname(project_dir, pathname))


##    prompt = """Please provide as detailed a description as possible of the following image.
##In particular, list the people, animals and any other creatures in it, and describe each of them
##separately, including such details as size relative to other elements, colour of hair, fur or eyes,
##clothing if applicable, apparent age and ethnicity if applicable, and general demeanour.
##
##Describe the location and background and what, if anything, appears to be happening in the scene.
##
##The image has been generated by DALL-E-3, and the information you provide will be used to ascertain
##how closely it matches the instructions given.
##"""
